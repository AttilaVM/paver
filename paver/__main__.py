from functools import partial
import re


def filter_pipeline(s, filter_list):
    char_list = []
    for char in s:
        for filter_fun in filter_list:
            substitute = filter_fun(char)
            if substitute:
                char_list.append(substitute)
    return "".join(char_list)


def sub_non_ascii(fill_char, char):
    char_code = ord(char)
    if char_code < 128:
        return char
    else:
        if fill_char is not None:
            return fill_char
        else:
            return None


def sub_char_by_rules(rules, char):
    for rule in rules:
        match_pattern = rule[0]
        if isinstance(match_pattern, re._pattern_type):
            if re.match(match_pattern, char):
                return rule[1]
        elif isinstance(match_pattern, str):
            if match_pattern is char:
                return rule[1]
        else:
            return char

# Borrowed from Oracle:
# https://docs.oracle.com/cd/E29584_01/webhelp/mdex_basicDev/src/rbdv_chars_mapping.html
substitution_rules = [[re.compile("\s"), "_"],
                      ["À", "a"],
                      ["Á", "a"],
                      ["Â", "a"],
                      ["Ã", "a"],
                      ["Ä", "a"],
                      ["Å", "a"],
                      ["Æ", "a"],
                      ["Ç", "c"],
                      ["È", "e"],
                      ["É", "e"],
                      ["Ê", "e"],
                      ["Ë", "e"],
                      ["Ì", "i"],
                      ["Í", "i"],
                      ["Î", "i"],
                      ["Ï", "i"],
                      ["Ð", "e"],
                      ["Ñ", "n"],
                      ["Ò", "o"],
                      ["Ó", "o"],
                      ["Ô", "o"],
                      ["Õ", "o"],
                      ["Ö", "o"],
                      ["Ø", "o"],
                      ["Ù", "u"],
                      ["Ú", "u"],
                      ["Û", "u"],
                      ["Ü", "u"],
                      ["Ý", "y"],
                      ["Þ", "p"],
                      ["ß", "s"],
                      ["à", "a"],
                      ["á", "a"],
                      ["â", "a"],
                      ["ã", "a"],
                      ["ä", "a"],
                      ["å", "a"],
                      ["æ", "a"],
                      ["ç", "c"],
                      ["è", "e"],
                      ["é", "e"],
                      ["ê", "e"],
                      ["ë", "e"],
                      ["ì", "i"],
                      ["í", "i"],
                      ["î", "i"],
                      ["ï", "i"],
                      ["ð", "e"],
                      ["ñ", "n"],
                      ["ò", "o"],
                      ["ó", "o"],
                      ["ô", "o"],
                      ["õ", "o"],
                      ["ö", "o"],
                      ["ø", "o"],
                      ["ù", "u"],
                      ["ú", "u"],
                      ["û", "u"],
                      ["ü", "u"],
                      ["ý", "y"],
                      ["þ", "p"],
                      ["ÿ", "y"],
                      ["Ā", "a"],
                      ["ā", "a"],
                      ["Ă", "a"],
                      ["ă", "a"],
                      ["Ą", "a"],
                      ["ą", "a"],
                      ["Ć", "c"],
                      ["ć", "c"],
                      ["Ĉ", "c"],
                      ["ĉ", "c"],
                      ["Ċ", "c"],
                      ["ċ", "c"],
                      ["Č", "c"],
                      ["č", "c"],
                      ["Ď", "d"],
                      ["ď", "d"],
                      ["Đ", "d"],
                      ["đ", "d"],
                      ["Ē", "e"],
                      ["ē", "e"],
                      ["Ĕ", "e"],
                      ["ĕ", "e"],
                      ["Ė", "e"],
                      ["ė", "e"],
                      ["Ę", "e"],
                      ["ę", "e"],
                      ["Ě", "e"],
                      ["ě", "e"],
                      ["Ĝ", "g"],
                      ["ĝ", "g"],
                      ["Ğ", "g"],
                      ["ğ", "g"],
                      ["Ġ", "g"],
                      ["ġ", "g"],
                      ["Ģ", "g"],
                      ["ģ", "g"],
                      ["Ĥ", "h"],
                      ["ĥ", "h"],
                      ["Ħ", "h"],
                      ["ħ", "h"],
                      ["Ĩ", "i"],
                      ["ĩ", "i"],
                      ["Ī", "i"],
                      ["ī", "i"],
                      ["Ĭ", "i"],
                      ["ĭ", "i"],
                      ["Į", "i"],
                      ["į", "i"],
                      ["İ", "i"],
                      ["ı", "i"],
                      ["Ĳ", "i"],
                      ["ĳ", "i"],
                      ["Ĵ", "j"],
                      ["ĵ", "j"],
                      ["Ķ", "k"],
                      ["ķ", "k"],
                      ["ĸ", "k"],
                      ["Ĺ", "l"],
                      ["ĺ", "l"],
                      ["Ļ", "l"],
                      ["ļ", "l"],
                      ["Ľ", "l"],
                      ["ľ", "l"],
                      ["Ŀ", "l"],
                      ["ŀ", "l"],
                      ["Ł", "l"],
                      ["ł", "l"],
                      ["Ń", "n"],
                      ["ń", "n"],
                      ["Ņ", "n"],
                      ["ņ", "n"],
                      ["Ň", "n"],
                      ["ň", "n"],
                      ["ŉ", "n"],
                      ["Ŋ", "n"],
                      ["ŋ", "n"],
                      ["Ō", "o"],
                      ["ō", "o"],
                      ["Ŏ", "o"],
                      ["ŏ", "o"],
                      ["Ő", "o"],
                      ["ő", "o"],
                      ["Œ", "o"],
                      ["œ", "o"],
                      ["Ŕ", "r"],
                      ["ŕ", "r"],
                      ["Ŗ", "r"],
                      ["ŗ", "r"],
                      ["Ř", "r"],
                      ["ř", "r"],
                      ["Ś", "s"],
                      ["ś", "s"],
                      ["Ŝ", "s"],
                      ["ŝ", "s"],
                      ["Ş", "s"],
                      ["ş", "s"],
                      ["Š", "s"],
                      ["š", "s"],
                      ["Ţ", "t"],
                      ["ţ", "t"],
                      ["Ť", "t"],
                      ["ť", "t"],
                      ["Ŧ", "t"],
                      ["ŧ", "t"],
                      ["Ũ", "u"],
                      ["ũ", "u"],
                      ["Ū", "u"],
                      ["ū", "u"],
                      ["Ŭ", "u"],
                      ["ŭ", "u"],
                      ["Ů", "u"],
                      ["ů", "u"],
                      ["Ű", "u"],
                      ["ű", "u"],
                      ["Ų", "u"],
                      ["ų", "u"],
                      ["Ŵ", "w"],
                      ["ŵ", "w"],
                      ["Ŷ", "y"],
                      ["ŷ", "y"],
                      ["Ÿ", "y"],
                      ["Ź", "z"],
                      ["ź", "z"],
                      ["Ż", "z"],
                      ["ż", "z"],
                      ["Ž", "z"],
                      ["ž", "z"],
                      ["ſ", "s"],
                      ["á", "a"],
                      ["é", "e"],
                      ["ü", "u"],
                      ["ó", "o"],
                      ["ű", "u"],
                      ["ő", "o"],
                      ["ú", "u"],
                      ["á", "a"]]


def denoober(s):
    return filter_pipeline(s, [partial(sub_char_by_rules, substitution_rules),
                        partial(sub_non_ascii, None)])
